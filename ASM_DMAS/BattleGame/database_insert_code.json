// Complete BattleGame test data setup script
// Run this entire script in the MongoDB shell

use BATTLEGAME;

// Clear existing data (optional - remove if you want to keep existing data)
// db.players.deleteMany({});
// db.assets.deleteMany({});
// db.playerAssets.deleteMany({});

// Insert all players
db.players.insertMany([
  {
    playerName: "DragonSlayer99",
    fullName: "Alex Chen",
    age: 23,
    level: 15,
    email: "alex.chen@email.com",
    createdAt: new Date("2024-01-15T08:30:00Z")
  },
  {
    playerName: "MysticMage",
    fullName: "Sarah Williams",
    age: 19,
    level: 8,
    email: "sarah.w@email.com",
    createdAt: new Date("2024-02-01T14:22:00Z")
  },
  {
    playerName: "ShadowNinja",
    fullName: "Kevin Park",
    age: 27,
    level: 22,
    email: "kevin.park@email.com",
    createdAt: new Date("2024-01-20T19:45:00Z")
  },
  {
    playerName: "LightBringer",
    fullName: "Maria Rodriguez",
    age: 21,
    level: 12,
    email: "maria.r@email.com",
    createdAt: new Date("2024-02-10T11:15:00Z")
  },
  {
    playerName: "IceQueen",
    fullName: "Emma Thompson",
    age: 25,
    level: 18,
    email: "emma.thompson@email.com",
    createdAt: new Date("2024-01-25T16:30:00Z")
  },
  {
    playerName: "FireStorm",
    fullName: "Jake Morrison",
    age: 20,
    level: 5,
    email: "jake.m@email.com",
    createdAt: new Date("2024-02-15T09:00:00Z")
  },
  {
    playerName: "StormWarden",
    fullName: "Lisa Zhang",
    age: 24,
    level: 10,
    email: "lisa.zhang@email.com",
    createdAt: new Date("2024-02-05T13:45:00Z")
  },
  {
    playerName: "VoidWalker",
    fullName: "Michael O'Connor",
    age: 28,
    level: 25,
    email: "michael.oc@email.com",
    createdAt: new Date("2024-01-10T07:20:00Z")
  }
]);

// Insert all assets
db.assets.insertMany([
  {
    assetName: "Wooden Sword",
    levelRequire: 1,
    description: "A simple wooden training sword. Perfect for beginners learning the basics of combat.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Steel Blade",
    levelRequire: 5,
    description: "A well-crafted steel sword with improved damage and durability.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Fire Enchanted Sword",
    levelRequire: 10,
    description: "A magical sword imbued with fire magic, dealing extra fire damage to enemies.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Dragon Slayer Blade",
    levelRequire: 20,
    description: "Legendary weapon forged from dragon scales. Extremely powerful against all creatures.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Healing Potion",
    levelRequire: 1,
    description: "Restores health when consumed. Essential for any adventurer.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Mana Crystal",
    levelRequire: 8,
    description: "Increases magical power and mana regeneration rate.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Shadow Cloak",
    levelRequire: 15,
    description: "Grants stealth abilities and protection against dark magic.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Phoenix Feather",
    levelRequire: 18,
    description: "Rare item that grants resurrection ability once per battle.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Armor of Light",
    levelRequire: 12,
    description: "Divine armor that provides excellent protection and holy resistance.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  },
  {
    assetName: "Void Crystal",
    levelRequire: 25,
    description: "Ultimate magical artifact with reality-bending powers. Extremely rare.",
    createdAt: new Date("2024-01-01T00:00:00Z")
  }
]);

// Get references for creating relationships
var players = db.players.find({}, {_id: 1, playerName: 1, level: 1}).toArray();
var assets = db.assets.find({}, {_id: 1, assetName: 1, levelRequire: 1}).toArray();

// Create player-asset relationships
db.playerAssets.insertMany([
  // DragonSlayer99 (Level 15)
  {
    playerId: players.find(p => p.playerName === "DragonSlayer99")._id,
    assetId: assets.find(a => a.assetName === "Fire Enchanted Sword")._id,
    assignedAt: new Date("2024-01-16T10:30:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "DragonSlayer99")._id,
    assetId: assets.find(a => a.assetName === "Shadow Cloak")._id,
    assignedAt: new Date("2024-01-18T14:22:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "DragonSlayer99")._id,
    assetId: assets.find(a => a.assetName === "Armor of Light")._id,
    assignedAt: new Date("2024-01-20T09:15:00Z")
  },
  // MysticMage (Level 8)
  {
    playerId: players.find(p => p.playerName === "MysticMage")._id,
    assetId: assets.find(a => a.assetName === "Mana Crystal")._id,
    assignedAt: new Date("2024-02-02T11:45:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "MysticMage")._id,
    assetId: assets.find(a => a.assetName === "Healing Potion")._id,
    assignedAt: new Date("2024-02-03T16:30:00Z")
  },
  // ShadowNinja (Level 22)
  {
    playerId: players.find(p => p.playerName === "ShadowNinja")._id,
    assetId: assets.find(a => a.assetName === "Dragon Slayer Blade")._id,
    assignedAt: new Date("2024-01-22T20:00:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "ShadowNinja")._id,
    assetId: assets.find(a => a.assetName === "Phoenix Feather")._id,
    assignedAt: new Date("2024-01-25T15:45:00Z")
  },
  // LightBringer (Level 12)
  {
    playerId: players.find(p => p.playerName === "LightBringer")._id,
    assetId: assets.find(a => a.assetName === "Armor of Light")._id,
    assignedAt: new Date("2024-02-12T13:20:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "LightBringer")._id,
    assetId: assets.find(a => a.assetName === "Fire Enchanted Sword")._id,
    assignedAt: new Date("2024-02-14T08:30:00Z")
  },
  // IceQueen (Level 18)
  {
    playerId: players.find(p => p.playerName === "IceQueen")._id,
    assetId: assets.find(a => a.assetName === "Phoenix Feather")._id,
    assignedAt: new Date("2024-01-28T12:15:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "IceQueen")._id,
    assetId: assets.find(a => a.assetName === "Shadow Cloak")._id,
    assignedAt: new Date("2024-01-30T17:40:00Z")
  },
  // FireStorm (Level 5)
  {
    playerId: players.find(p => p.playerName === "FireStorm")._id,
    assetId: assets.find(a => a.assetName === "Steel Blade")._id,
    assignedAt: new Date("2024-02-16T10:22:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "FireStorm")._id,
    assetId: assets.find(a => a.assetName === "Healing Potion")._id,
    assignedAt: new Date("2024-02-17T14:55:00Z")
  },
  // StormWarden (Level 10)
  {
    playerId: players.find(p => p.playerName === "StormWarden")._id,
    assetId: assets.find(a => a.assetName === "Fire Enchanted Sword")._id,
    assignedAt: new Date("2024-02-07T09:30:00Z")
  },
  // VoidWalker (Level 25)
  {
    playerId: players.find(p => p.playerName === "VoidWalker")._id,
    assetId: assets.find(a => a.assetName === "Void Crystal")._id,
    assignedAt: new Date("2024-01-12T18:20:00Z")
  },
  {
    playerId: players.find(p => p.playerName === "VoidWalker")._id,
    assetId: assets.find(a => a.assetName === "Dragon Slayer Blade")._id,
    assignedAt: new Date("2024-01-15T11:45:00Z")
  }
]);

// Verification and testing
print("=== DATA LOADING COMPLETE ===");
print("Players inserted:", db.players.countDocuments());
print("Assets inserted:", db.assets.countDocuments());
print("Player-Asset relationships created:", db.playerAssets.countDocuments());

print("\n=== SAMPLE AGGREGATION RESULT ===");
var sampleResults = db.playerAssets.aggregate([
  {
    $lookup: {
      from: "players",
      localField: "playerId",
      foreignField: "_id",
      as: "player"
    }
  },
  {
    $lookup: {
      from: "assets",
      localField: "assetId",
      foreignField: "_id",
      as: "asset"
    }
  },
  {
    $unwind: "$player"
  },
  {
    $unwind: "$asset"
  },
  {
    $project: {
      playerName: "$player.playerName",
      level: "$player.level",
      age: "$player.age",
      assetName: "$asset.assetName"
    }
  },
  {
    $limit: 5
  }
]).toArray();

print("First 5 results from your aggregation pipeline:");
sampleResults.forEach((result, index) => {
  print(`${index + 1}. ${result.playerName} (Lv.${result.level}, Age ${result.age}) - ${result.assetName}`);
});

print("\nYour data is ready! Start your API server and React frontend to see the results.");